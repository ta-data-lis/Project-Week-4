{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Descriptive Statistics and Inferential Statistics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Descirptive Statistics\n",
    "    1.1 DS\n",
    "    1.2 Conclusion\n",
    "\n",
    "2. Compare Cities\n",
    "    \n",
    "    2.1 Price\n",
    "   \n",
    "    2.2 Size (Rooms and m2)\n",
    "    \n",
    "    2.3 nr of announcements per day\n",
    "\n",
    "\n",
    "3. Distribution of Publication Date\n",
    "\n",
    "\n",
    "4. Price\n",
    "\n",
    "            correlation with size and room number and also floor\n",
    "\n",
    "\n",
    "5. Additional Ideas / Plots\n",
    "    \n",
    "    5.1 most common features (just a plot in tableau)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 416,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import time\n",
    "import re\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from scipy.stats import ttest_1samp, ttest_rel, ttest_ind\n",
    "from scipy.stats import f_oneway\n",
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 417,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>object_type</th>\n",
       "      <th>price</th>\n",
       "      <th>price_wo_extras</th>\n",
       "      <th>extras</th>\n",
       "      <th>size</th>\n",
       "      <th>rooms</th>\n",
       "      <th>floor</th>\n",
       "      <th>moovIn</th>\n",
       "      <th>balcony</th>\n",
       "      <th>lift</th>\n",
       "      <th>...</th>\n",
       "      <th>age</th>\n",
       "      <th>parking_out</th>\n",
       "      <th>pets_allowed</th>\n",
       "      <th>tv</th>\n",
       "      <th>kids_ok</th>\n",
       "      <th>KG</th>\n",
       "      <th>PS</th>\n",
       "      <th>SS</th>\n",
       "      <th>highway</th>\n",
       "      <th>parking_in</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>23016581</td>\n",
       "      <td>Wohnung</td>\n",
       "      <td>1480.0</td>\n",
       "      <td>1240.0</td>\n",
       "      <td>240.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>01.05.2020</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23016600</td>\n",
       "      <td>Wohnung</td>\n",
       "      <td>3500.0</td>\n",
       "      <td>3200.0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>01.05.2020</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23014342</td>\n",
       "      <td>Wohnung</td>\n",
       "      <td>1710.0</td>\n",
       "      <td>1470.0</td>\n",
       "      <td>240.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>01.03.2020</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1965.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>700.0</td>\n",
       "      <td>700.0</td>\n",
       "      <td>700.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23017350</td>\n",
       "      <td>Wohnung</td>\n",
       "      <td>1180.0</td>\n",
       "      <td>1030.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>01.05.2020</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>350.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23016559</td>\n",
       "      <td>Wohnung</td>\n",
       "      <td>1360.0</td>\n",
       "      <td>1230.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>01.06.2020</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1600.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         object_type   price  price_wo_extras  extras   size  rooms  floor  \\\n",
       "23016581     Wohnung  1480.0           1240.0   240.0   68.0    3.0    2.0   \n",
       "23016600     Wohnung  3500.0           3200.0   300.0  140.0    5.0    2.0   \n",
       "23014342     Wohnung  1710.0           1470.0   240.0   73.0    3.5    NaN   \n",
       "23017350     Wohnung  1180.0           1030.0   150.0    NaN    2.0    1.0   \n",
       "23016559     Wohnung  1360.0           1230.0   130.0   44.0    2.5    3.0   \n",
       "\n",
       "              moovIn  balcony  lift  ...     age  parking_out  pets_allowed  \\\n",
       "23016581  01.05.2020      1.0   1.0  ...     NaN          NaN           NaN   \n",
       "23016600  01.05.2020      1.0   1.0  ...     NaN          NaN           NaN   \n",
       "23014342  01.03.2020      1.0   1.0  ...  1965.0          1.0           1.0   \n",
       "23017350  01.05.2020      1.0   NaN  ...     NaN          NaN           NaN   \n",
       "23016559  01.06.2020      NaN   NaN  ...  1600.0          NaN           NaN   \n",
       "\n",
       "           tv kids_ok     KG     PS     SS  highway  parking_in  \n",
       "23016581  NaN     NaN    NaN    NaN    NaN      NaN         NaN  \n",
       "23016600  NaN     NaN    NaN    NaN    NaN      NaN         NaN  \n",
       "23014342  1.0     1.0  700.0  700.0  700.0      NaN         NaN  \n",
       "23017350  NaN     NaN  350.0    NaN    NaN   1000.0         NaN  \n",
       "23016559  1.0     NaN    NaN    NaN    NaN      NaN         NaN  \n",
       "\n",
       "[5 rows x 27 columns]"
      ]
     },
     "execution_count": 417,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds= pd.read_csv('./Data/c_flats_clean.csv', index_col=0)\n",
    "ds.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Descriptive Statistics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1 DS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install pandas-profiling[notebook,html]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pandas_profiling import ProfileReport"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "profile = ProfileReport(ds, title='Pandas Profiling Report')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "profile.to_notebook_iframe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.1 Conclusions from DS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- dublicates droped\n",
    "- correlations btw. prices ok, no others discovered\n",
    "\n",
    "Descriptive:\n",
    "- adress: often not precise enough to locate to one point(because road is missing). Could check if really only in the cities? or also outside? suburban areas?\n",
    "- age: a lot of missings, only some very old ones --> drop outliers when looking at age\n",
    "- balcony, only 50% missings\n",
    "- city: split btw. city\n",
    "- only 2/3 split cost in extras _ non extras --> focus on rent, not on splittet cost (no added value)\n",
    "- floor: for 3/4 available: good!  --> drop outliers when looking at age\n",
    "- highway: log normal distributed, but a lot of missings\n",
    "- same for KG, PS, SS\n",
    "- kids_ok, lift, parking_in, parking_out, pets_allowed, public transport, shopping: good for yes or no analysis\n",
    "- moovIn: mix btw. str and date, but could be usefull for analysis, but probably not in this analysis\n",
    "- object type: important to know, because i only wanted to have flats... -->> drop!!!! ok, done in cleaning. however, \"wohnung\" is a supercategory of the rest, so thats why a distinction is probably delicate\n",
    "- price: droped outliers downwoards, but not upwards --> keep in mind\n",
    "- publication date: distribution? 10% missings, but still useful\n",
    "- rating could be interesting, but a lot of missings... --> not in the focus\n",
    "- rooms: expected distribution. --> good to use, not a lot of missings\n",
    "- size: 1/4 missings, but still usefull. Normal distributed?\n",
    "\n",
    "Correlation:\n",
    "- extras and size: logisch\n",
    "- prize: size and rooms, but also floor (probably not linear, but could be interesting to do a taylor approximation (or however it is called)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Compare Cities"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    2.1 Price\n",
    "    2.2 Size (Rooms and m2)\n",
    "    2.3 nr of announcements per day"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.1 Differences t-stat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 419,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>price_wo_extras</th>\n",
       "      <th>extras</th>\n",
       "      <th>size</th>\n",
       "      <th>rooms</th>\n",
       "      <th>floor</th>\n",
       "      <th>balcony</th>\n",
       "      <th>lift</th>\n",
       "      <th>public_transport</th>\n",
       "      <th>shopping</th>\n",
       "      <th>...</th>\n",
       "      <th>age</th>\n",
       "      <th>parking_out</th>\n",
       "      <th>pets_allowed</th>\n",
       "      <th>tv</th>\n",
       "      <th>kids_ok</th>\n",
       "      <th>KG</th>\n",
       "      <th>PS</th>\n",
       "      <th>SS</th>\n",
       "      <th>highway</th>\n",
       "      <th>parking_in</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>city</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>bern</td>\n",
       "      <td>1723.267356</td>\n",
       "      <td>1633.508982</td>\n",
       "      <td>231.259481</td>\n",
       "      <td>76.510158</td>\n",
       "      <td>2.827663</td>\n",
       "      <td>2.546778</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>224.945455</td>\n",
       "      <td>364.439114</td>\n",
       "      <td>...</td>\n",
       "      <td>1956.818653</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>578.825301</td>\n",
       "      <td>572.742331</td>\n",
       "      <td>974.493976</td>\n",
       "      <td>1299.083333</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>luzern</td>\n",
       "      <td>1945.738872</td>\n",
       "      <td>1757.939446</td>\n",
       "      <td>216.356401</td>\n",
       "      <td>83.350626</td>\n",
       "      <td>3.305349</td>\n",
       "      <td>2.842105</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>175.370056</td>\n",
       "      <td>385.796512</td>\n",
       "      <td>...</td>\n",
       "      <td>1972.864865</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>463.069767</td>\n",
       "      <td>551.064103</td>\n",
       "      <td>883.427632</td>\n",
       "      <td>1882.584795</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>zuerich</td>\n",
       "      <td>2411.639785</td>\n",
       "      <td>2451.014587</td>\n",
       "      <td>241.505673</td>\n",
       "      <td>78.261939</td>\n",
       "      <td>2.793831</td>\n",
       "      <td>2.347280</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>169.942529</td>\n",
       "      <td>394.020057</td>\n",
       "      <td>...</td>\n",
       "      <td>1975.431169</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>355.946341</td>\n",
       "      <td>456.509901</td>\n",
       "      <td>741.606452</td>\n",
       "      <td>1837.312500</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows Ã— 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               price  price_wo_extras      extras       size     rooms  \\\n",
       "city                                                                     \n",
       "bern     1723.267356      1633.508982  231.259481  76.510158  2.827663   \n",
       "luzern   1945.738872      1757.939446  216.356401  83.350626  3.305349   \n",
       "zuerich  2411.639785      2451.014587  241.505673  78.261939  2.793831   \n",
       "\n",
       "            floor  balcony  lift  public_transport    shopping  ...  \\\n",
       "city                                                            ...   \n",
       "bern     2.546778      1.0   1.0        224.945455  364.439114  ...   \n",
       "luzern   2.842105      1.0   1.0        175.370056  385.796512  ...   \n",
       "zuerich  2.347280      1.0   1.0        169.942529  394.020057  ...   \n",
       "\n",
       "                 age  parking_out  pets_allowed   tv  kids_ok          KG  \\\n",
       "city                                                                        \n",
       "bern     1956.818653          1.0           1.0  1.0      1.0  578.825301   \n",
       "luzern   1972.864865          1.0           1.0  1.0      1.0  463.069767   \n",
       "zuerich  1975.431169          1.0           1.0  1.0      1.0  355.946341   \n",
       "\n",
       "                 PS          SS      highway  parking_in  \n",
       "city                                                      \n",
       "bern     572.742331  974.493976  1299.083333         1.0  \n",
       "luzern   551.064103  883.427632  1882.584795         1.0  \n",
       "zuerich  456.509901  741.606452  1837.312500         1.0  \n",
       "\n",
       "[3 rows x 21 columns]"
      ]
     },
     "execution_count": 419,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds.groupby('city').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 420,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>rooms</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>city</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>bern</td>\n",
       "      <td>1723.267356</td>\n",
       "      <td>2.827663</td>\n",
       "      <td>76.510158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>luzern</td>\n",
       "      <td>1945.738872</td>\n",
       "      <td>3.305349</td>\n",
       "      <td>83.350626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>zuerich</td>\n",
       "      <td>2411.639785</td>\n",
       "      <td>2.793831</td>\n",
       "      <td>78.261939</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               price     rooms       size\n",
       "city                                     \n",
       "bern     1723.267356  2.827663  76.510158\n",
       "luzern   1945.738872  3.305349  83.350626\n",
       "zuerich  2411.639785  2.793831  78.261939"
      ]
     },
     "execution_count": 420,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds.pivot_table(index=[\"city\"], values=['price', \"rooms\",\"size\"], aggfunc= { 'price': np.mean,'rooms':np.mean,  'size':np.mean}, fill_value='-')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.1.1 test one city against \"the rest\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <font color='red'>TODO</font> \n",
    "PLOT:  3 DIFFERENt BARPLOTS FOR PRICE, ROOMS AND SIZE JEWEILS PRO STADT "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 421,
   "metadata": {},
   "outputs": [],
   "source": [
    "measure = ['price', 'rooms', 'size']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 422,
   "metadata": {},
   "outputs": [],
   "source": [
    "city= ds['city'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 423,
   "metadata": {},
   "outputs": [],
   "source": [
    "### remark: all the tests are for alpha = 5% \n",
    "\n",
    "def t_test (city, measureList): \n",
    "    ds_city= ds[ds['city']==city][measureList].dropna()\n",
    "    ds_notcity= ds[ds['city']!=city][measureList].dropna()\n",
    "    dic = {}\n",
    "    for m in measureList:\n",
    "        dic[m] = [round(ttest_ind(ds_city[m], ds_notcity[m])[0],2),round(ttest_ind(ds_city[m], ds_notcity[m])[1],3) ] \n",
    "    return dic\n",
    "\n",
    "def t_test_other (city, othercity, measureList): \n",
    "    ds_city= ds[ds['city']==city][measureList].dropna()\n",
    "    ds_othercity= ds[ds['city']==othercity][measureList].dropna()\n",
    "    dic = {}\n",
    "    for m in measureList:\n",
    "        dic[m] = [round(ttest_ind(ds_city[m], ds_othercity[m])[0],2),round(ttest_ind(ds_city[m], ds_othercity[m])[1],3) ] \n",
    "    return dic"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### a) Bern"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 424,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'price': [-7.95, 0.0], 'rooms': [-1.94, 0.052], 'size': [-1.94, 0.052]}"
      ]
     },
     "execution_count": 424,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "t_test('bern', measure)\n",
    "## significant differences bern against the others only regarding price (lower)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 425,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "luzern {'price': [-2.94, 0.003], 'rooms': [-5.04, 0.0], 'size': [-3.09, 0.002]}\n",
      "zuerich {'price': [-10.81, 0.0], 'rooms': [0.72, 0.471], 'size': [-0.76, 0.446]}\n"
     ]
    }
   ],
   "source": [
    "### also compared to asingle city?\n",
    "\n",
    "print('luzern', t_test_other ('bern', 'luzern', measure))\n",
    "print('zuerich', t_test_other ('bern', 'zuerich', measure))\n",
    "### similar toe zuerich regarting rooms"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### b) Luzern"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 426,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'price': [-5.27, 0.0], 'rooms': [6.32, 0.0], 'size': [2.98, 0.003]}"
      ]
     },
     "execution_count": 426,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_test('luzern', measure)\n",
    "## significant differences luzer against the others (lower prices and more rooms)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 427,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "luzern bern {'price': [2.94, 0.003], 'rooms': [5.04, 0.0], 'size': [3.09, 0.002]}\n",
      "luzern zuerich {'price': [-8.9, 0.0], 'rooms': [5.93, 0.0], 'size': [2.28, 0.023]}\n"
     ]
    }
   ],
   "source": [
    "print('luzern', 'bern', t_test_other ('luzern', 'bern', measure))\n",
    "print('luzern', 'zuerich', t_test_other ('luzern', 'zuerich', measure))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### c) Zuerich"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 428,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'price': [12.52, 0.0], 'rooms': [-4.26, 0.0], 'size': [-1.11, 0.266]}"
      ]
     },
     "execution_count": 428,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_test('zuerich', measure)\n",
    "## significant differences zuerich against the others (higher prices and less rooms)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 429,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "zuerich bern {'price': [10.81, 0.0], 'rooms': [-0.72, 0.471], 'size': [0.76, 0.446]}\n",
      "zuerich luzern {'price': [8.9, 0.0], 'rooms': [-5.93, 0.0], 'size': [-2.28, 0.023]}\n"
     ]
    }
   ],
   "source": [
    "print('zuerich', 'bern', t_test_other ('zuerich', 'bern', measure))\n",
    "print('zuerich', 'luzern', t_test_other ('zuerich', 'luzern', measure))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### b) ANOVA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 430,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sum_sq</th>\n",
       "      <th>df</th>\n",
       "      <th>F</th>\n",
       "      <th>PR(&gt;F)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>C(city)</td>\n",
       "      <td>2.003457e+08</td>\n",
       "      <td>2.0</td>\n",
       "      <td>86.732372</td>\n",
       "      <td>4.987346e-37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Residual</td>\n",
       "      <td>2.631010e+09</td>\n",
       "      <td>2278.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                sum_sq      df          F        PR(>F)\n",
       "C(city)   2.003457e+08     2.0  86.732372  4.987346e-37\n",
       "Residual  2.631010e+09  2278.0        NaN           NaN"
      ]
     },
     "execution_count": 430,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "from statsmodels.formula.api import ols\n",
    "\n",
    "model = ols('price ~ C(city)', data=ds).fit()\n",
    "anova_table = sm.stats.anova_lm(model, typ=2)\n",
    "anova_table\n",
    "\n",
    "### conclusion for plot:  price: signifiant difference among each others (same as above)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 431,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sum_sq</th>\n",
       "      <th>df</th>\n",
       "      <th>F</th>\n",
       "      <th>PR(&gt;F)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>C(city)</td>\n",
       "      <td>117.569266</td>\n",
       "      <td>2.0</td>\n",
       "      <td>39.760197</td>\n",
       "      <td>1.066435e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Residual</td>\n",
       "      <td>3356.148288</td>\n",
       "      <td>2270.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               sum_sq      df          F        PR(>F)\n",
       "C(city)    117.569266     2.0  39.760197  1.066435e-17\n",
       "Residual  3356.148288  2270.0        NaN           NaN"
      ]
     },
     "execution_count": 431,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = ols('rooms ~ C(city)', data=ds).fit()\n",
    "anova_table = sm.stats.anova_lm(model, typ=2)\n",
    "anova_table\n",
    "\n",
    "### there are differences regarding the room"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 432,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sum_sq</th>\n",
       "      <th>df</th>\n",
       "      <th>F</th>\n",
       "      <th>PR(&gt;F)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>C(city)</td>\n",
       "      <td>1.330723e+04</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.747291</td>\n",
       "      <td>0.008791</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Residual</td>\n",
       "      <td>2.368638e+06</td>\n",
       "      <td>1690.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                sum_sq      df         F    PR(>F)\n",
       "C(city)   1.330723e+04     2.0  4.747291  0.008791\n",
       "Residual  2.368638e+06  1690.0       NaN       NaN"
      ]
     },
     "execution_count": 432,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = ols('size ~ C(city)', data=ds).fit()\n",
    "anova_table = sm.stats.anova_lm(model, typ=2)\n",
    "anova_table\n",
    "### there are differences regarding the size"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2.2  price for different numbers of room"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 433,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def t_test_roomsize (roomsize):\n",
    "    cities= ds['city'].unique()\n",
    "    dic = {}\n",
    "    for c in cities:\n",
    "        ds_city= ds[(ds['city']==c) & (ds['rooms']==roomsize)]['price'].dropna()\n",
    "        ds_notcity= ds[(ds['city']!=c) & (ds['rooms']==roomsize)]['price'].dropna()\n",
    "        dic[c] = [round(ttest_ind(ds_city, ds_notcity)[0],2),round(ttest_ind(ds_city, ds_notcity)[1],3) ] \n",
    "    return dic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 434,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bern</th>\n",
       "      <th>zuerich</th>\n",
       "      <th>luzern</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>[-2.77, 0.006]</td>\n",
       "      <td>[5.02, 0.0]</td>\n",
       "      <td>[-3.32, 0.001]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.5</td>\n",
       "      <td>[-2.66, 0.009]</td>\n",
       "      <td>[2.99, 0.003]</td>\n",
       "      <td>[-0.83, 0.41]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>[-2.43, 0.016]</td>\n",
       "      <td>[4.92, 0.0]</td>\n",
       "      <td>[-2.53, 0.012]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.5</td>\n",
       "      <td>[-7.86, 0.0]</td>\n",
       "      <td>[12.79, 0.0]</td>\n",
       "      <td>[-4.27, 0.0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>[-4.83, 0.0]</td>\n",
       "      <td>[10.59, 0.0]</td>\n",
       "      <td>[-4.66, 0.0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.5</td>\n",
       "      <td>[-5.4, 0.0]</td>\n",
       "      <td>[14.31, 0.0]</td>\n",
       "      <td>[-7.46, 0.0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>[-1.24, 0.219]</td>\n",
       "      <td>[4.85, 0.0]</td>\n",
       "      <td>[-3.65, 0.0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.5</td>\n",
       "      <td>[-2.79, 0.006]</td>\n",
       "      <td>[9.09, 0.0]</td>\n",
       "      <td>[-5.63, 0.0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5.0</td>\n",
       "      <td>[-1.7, 0.108]</td>\n",
       "      <td>[0.12, 0.902]</td>\n",
       "      <td>[1.67, 0.113]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5.5</td>\n",
       "      <td>[-0.81, 0.42]</td>\n",
       "      <td>[3.6, 0.001]</td>\n",
       "      <td>[-2.79, 0.007]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               bern        zuerich          luzern\n",
       "1.0  [-2.77, 0.006]    [5.02, 0.0]  [-3.32, 0.001]\n",
       "1.5  [-2.66, 0.009]  [2.99, 0.003]   [-0.83, 0.41]\n",
       "2.0  [-2.43, 0.016]    [4.92, 0.0]  [-2.53, 0.012]\n",
       "2.5    [-7.86, 0.0]   [12.79, 0.0]    [-4.27, 0.0]\n",
       "3.0    [-4.83, 0.0]   [10.59, 0.0]    [-4.66, 0.0]\n",
       "3.5     [-5.4, 0.0]   [14.31, 0.0]    [-7.46, 0.0]\n",
       "4.0  [-1.24, 0.219]    [4.85, 0.0]    [-3.65, 0.0]\n",
       "4.5  [-2.79, 0.006]    [9.09, 0.0]    [-5.63, 0.0]\n",
       "5.0   [-1.7, 0.108]  [0.12, 0.902]   [1.67, 0.113]\n",
       "5.5   [-0.81, 0.42]   [3.6, 0.001]  [-2.79, 0.007]"
      ]
     },
     "execution_count": 434,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dictroom = {}\n",
    "for x in sorted(ds['rooms'].unique())[:-6]:\n",
    "    dictroom[x] = t_test_roomsize(x)\n",
    "dictroom\n",
    "\n",
    "dictroom = pd.DataFrame.from_dict(dictroom, orient='index').dropna()\n",
    "dictroom"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### <font color='red'>TODO</font> \n",
    "PLOT:  lineplot for roomsize, where each city is a line"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2.3 Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 465,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>bern</th>\n",
       "      <th>luzern</th>\n",
       "      <th>zuerich</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>rooms</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td rowspan=\"16\" valign=\"top\">price</td>\n",
       "      <td>1.0</td>\n",
       "      <td>951.633</td>\n",
       "      <td>853.698</td>\n",
       "      <td>1169.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.5</td>\n",
       "      <td>1253.63</td>\n",
       "      <td>1398.53</td>\n",
       "      <td>1655.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>1454.96</td>\n",
       "      <td>1392.64</td>\n",
       "      <td>1849.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.5</td>\n",
       "      <td>1579.47</td>\n",
       "      <td>1703.64</td>\n",
       "      <td>2388.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>1670.42</td>\n",
       "      <td>1627.01</td>\n",
       "      <td>2244.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.5</td>\n",
       "      <td>1934.49</td>\n",
       "      <td>1931.14</td>\n",
       "      <td>2858.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>2160.42</td>\n",
       "      <td>1934.7</td>\n",
       "      <td>2855.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.5</td>\n",
       "      <td>2553.27</td>\n",
       "      <td>2449.56</td>\n",
       "      <td>3694.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5.0</td>\n",
       "      <td>3154.38</td>\n",
       "      <td>4852.5</td>\n",
       "      <td>3999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5.5</td>\n",
       "      <td>3495</td>\n",
       "      <td>3187.74</td>\n",
       "      <td>5049.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6.0</td>\n",
       "      <td>2880</td>\n",
       "      <td>4253.57</td>\n",
       "      <td>6013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6.5</td>\n",
       "      <td>-</td>\n",
       "      <td>5310</td>\n",
       "      <td>4647.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7.0</td>\n",
       "      <td>4550</td>\n",
       "      <td>-</td>\n",
       "      <td>5486.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7.5</td>\n",
       "      <td>4650</td>\n",
       "      <td>-</td>\n",
       "      <td>5374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8.0</td>\n",
       "      <td>-</td>\n",
       "      <td>6900</td>\n",
       "      <td>-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12.5</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>6560</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "city            bern   luzern  zuerich\n",
       "      rooms                           \n",
       "price 1.0    951.633  853.698  1169.93\n",
       "      1.5    1253.63  1398.53  1655.19\n",
       "      2.0    1454.96  1392.64  1849.78\n",
       "      2.5    1579.47  1703.64  2388.73\n",
       "      3.0    1670.42  1627.01  2244.18\n",
       "      3.5    1934.49  1931.14  2858.74\n",
       "      4.0    2160.42   1934.7   2855.2\n",
       "      4.5    2553.27  2449.56  3694.84\n",
       "      5.0    3154.38   4852.5     3999\n",
       "      5.5       3495  3187.74  5049.56\n",
       "      6.0       2880  4253.57     6013\n",
       "      6.5          -     5310   4647.5\n",
       "      7.0       4550        -  5486.67\n",
       "      7.5       4650        -     5374\n",
       "      8.0          -     6900        -\n",
       "      12.5         -        -     6560"
      ]
     },
     "execution_count": 465,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cds=ds.pivot_table(index=[\"city\"], columns=[\"rooms\"], values=['price'], aggfunc= { 'price': np.mean,}, fill_value='-')\n",
    "cds=cds.transpose()\n",
    "cds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 468,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'city'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\u001b[0m in \u001b[0;36mget_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   2896\u001b[0m             \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2897\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2898\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'city'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-468-b99868bc5b05>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0max\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtick_params\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'both'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabelsize\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m14\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 7\u001b[1;33m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcds\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'city'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'rooms'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcds\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'bern'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0ms\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m5\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m0.502\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m0.266\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0.341\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      8\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      9\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   2978\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[1;33m>\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2979\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2980\u001b[1;33m             \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2981\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2982\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\u001b[0m in \u001b[0;36mget_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   2897\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2898\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2899\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2900\u001b[0m         \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2901\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mindexer\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[1;33m>\u001b[0m \u001b[1;36m1\u001b[0m \u001b[1;32mor\u001b[0m \u001b[0mindexer\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msize\u001b[0m \u001b[1;33m>\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'city'"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.3 nr of announcements per day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### <font color='red'>TODO</font> wenn zeit, diese tun"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Nr of announcements per day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 437,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['object_type', 'price', 'price_wo_extras', 'extras', 'size', 'rooms',\n",
       "       'floor', 'moovIn', 'balcony', 'lift', 'public_transport', 'shopping',\n",
       "       'rating', 'adress', 'publication_date', 'city', 'DateofScrapping',\n",
       "       'age', 'parking_out', 'pets_allowed', 'tv', 'kids_ok', 'KG', 'PS', 'SS',\n",
       "       'highway', 'parking_in'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 437,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 438,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([943., 512., 162.,  81.,  50.,  67.,  35.,  31.,  24.,  22.]),\n",
       " array([  0.,  19.,  38.,  57.,  76.,  95., 114., 133., 152., 171., 190.]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 438,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pubdate = ds[ds['publication_date'].isna()==False]\n",
    "plt.hist('publication_date', data=pubdate)\n",
    "\n",
    "### is it geometrically distributed?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 439,
   "metadata": {},
   "outputs": [],
   "source": [
    "### test goodnes of fit\n",
    "from scipy.stats import poisson\n",
    "from scipy.stats import norm\n",
    "from scipy.stats import geom"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 440,
   "metadata": {},
   "outputs": [],
   "source": [
    "pub_freq=pubdate.groupby('publication_date').agg({'city':'count'}).rename(columns={'city':'counts'})\n",
    "pub_freq=pub_freq.reset_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### a) assing a number of day instead of date:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 441,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2020-02-26'"
      ]
     },
     "execution_count": 441,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pub_freq['publication_date'].min()\n",
    "pub_freq['publication_date'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 442,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'2019-01-16': 407,\n",
       " '2019-01-17': 406,\n",
       " '2019-01-18': 405,\n",
       " '2019-01-19': 404,\n",
       " '2019-01-20': 403,\n",
       " '2019-01-21': 402,\n",
       " '2019-01-22': 401,\n",
       " '2019-01-23': 400,\n",
       " '2019-01-24': 399,\n",
       " '2019-01-25': 398,\n",
       " '2019-01-26': 397,\n",
       " '2019-01-27': 396,\n",
       " '2019-01-28': 395,\n",
       " '2019-01-29': 394,\n",
       " '2019-01-30': 393,\n",
       " '2019-01-31': 392,\n",
       " '2019-02-01': 391,\n",
       " '2019-02-02': 390,\n",
       " '2019-02-03': 389,\n",
       " '2019-02-04': 388,\n",
       " '2019-02-05': 387,\n",
       " '2019-02-06': 386,\n",
       " '2019-02-07': 385,\n",
       " '2019-02-08': 384,\n",
       " '2019-02-09': 383,\n",
       " '2019-02-10': 382,\n",
       " '2019-02-11': 381,\n",
       " '2019-02-12': 380,\n",
       " '2019-02-13': 379,\n",
       " '2019-02-14': 378,\n",
       " '2019-02-15': 377,\n",
       " '2019-02-16': 376,\n",
       " '2019-02-17': 375,\n",
       " '2019-02-18': 374,\n",
       " '2019-02-19': 373,\n",
       " '2019-02-20': 372,\n",
       " '2019-02-21': 371,\n",
       " '2019-02-22': 370,\n",
       " '2019-02-23': 369,\n",
       " '2019-02-24': 368,\n",
       " '2019-02-25': 367,\n",
       " '2019-02-26': 366,\n",
       " '2019-02-27': 365,\n",
       " '2019-02-28': 364,\n",
       " '2019-03-01': 363,\n",
       " '2019-03-02': 362,\n",
       " '2019-03-03': 361,\n",
       " '2019-03-04': 360,\n",
       " '2019-03-05': 359,\n",
       " '2019-03-06': 358,\n",
       " '2019-03-07': 357,\n",
       " '2019-03-08': 356,\n",
       " '2019-03-09': 355,\n",
       " '2019-03-10': 354,\n",
       " '2019-03-11': 353,\n",
       " '2019-03-12': 352,\n",
       " '2019-03-13': 351,\n",
       " '2019-03-14': 350,\n",
       " '2019-03-15': 349,\n",
       " '2019-03-16': 348,\n",
       " '2019-03-17': 347,\n",
       " '2019-03-18': 346,\n",
       " '2019-03-19': 345,\n",
       " '2019-03-20': 344,\n",
       " '2019-03-21': 343,\n",
       " '2019-03-22': 342,\n",
       " '2019-03-23': 341,\n",
       " '2019-03-24': 340,\n",
       " '2019-03-25': 339,\n",
       " '2019-03-26': 338,\n",
       " '2019-03-27': 337,\n",
       " '2019-03-28': 336,\n",
       " '2019-03-29': 335,\n",
       " '2019-03-30': 334,\n",
       " '2019-03-31': 333,\n",
       " '2019-04-01': 332,\n",
       " '2019-04-02': 331,\n",
       " '2019-04-03': 330,\n",
       " '2019-04-04': 329,\n",
       " '2019-04-05': 328,\n",
       " '2019-04-06': 327,\n",
       " '2019-04-07': 326,\n",
       " '2019-04-08': 325,\n",
       " '2019-04-09': 324,\n",
       " '2019-04-10': 323,\n",
       " '2019-04-11': 322,\n",
       " '2019-04-12': 321,\n",
       " '2019-04-13': 320,\n",
       " '2019-04-14': 319,\n",
       " '2019-04-15': 318,\n",
       " '2019-04-16': 317,\n",
       " '2019-04-17': 316,\n",
       " '2019-04-18': 315,\n",
       " '2019-04-19': 314,\n",
       " '2019-04-20': 313,\n",
       " '2019-04-21': 312,\n",
       " '2019-04-22': 311,\n",
       " '2019-04-23': 310,\n",
       " '2019-04-24': 309,\n",
       " '2019-04-25': 308,\n",
       " '2019-04-26': 307,\n",
       " '2019-04-27': 306,\n",
       " '2019-04-28': 305,\n",
       " '2019-04-29': 304,\n",
       " '2019-04-30': 303,\n",
       " '2019-05-01': 302,\n",
       " '2019-05-02': 301,\n",
       " '2019-05-03': 300,\n",
       " '2019-05-04': 299,\n",
       " '2019-05-05': 298,\n",
       " '2019-05-06': 297,\n",
       " '2019-05-07': 296,\n",
       " '2019-05-08': 295,\n",
       " '2019-05-09': 294,\n",
       " '2019-05-10': 293,\n",
       " '2019-05-11': 292,\n",
       " '2019-05-12': 291,\n",
       " '2019-05-13': 290,\n",
       " '2019-05-14': 289,\n",
       " '2019-05-15': 288,\n",
       " '2019-05-16': 287,\n",
       " '2019-05-17': 286,\n",
       " '2019-05-18': 285,\n",
       " '2019-05-19': 284,\n",
       " '2019-05-20': 283,\n",
       " '2019-05-21': 282,\n",
       " '2019-05-22': 281,\n",
       " '2019-05-23': 280,\n",
       " '2019-05-24': 279,\n",
       " '2019-05-25': 278,\n",
       " '2019-05-26': 277,\n",
       " '2019-05-27': 276,\n",
       " '2019-05-28': 275,\n",
       " '2019-05-29': 274,\n",
       " '2019-05-30': 273,\n",
       " '2019-05-31': 272,\n",
       " '2019-06-01': 271,\n",
       " '2019-06-02': 270,\n",
       " '2019-06-03': 269,\n",
       " '2019-06-04': 268,\n",
       " '2019-06-05': 267,\n",
       " '2019-06-06': 266,\n",
       " '2019-06-07': 265,\n",
       " '2019-06-08': 264,\n",
       " '2019-06-09': 263,\n",
       " '2019-06-10': 262,\n",
       " '2019-06-11': 261,\n",
       " '2019-06-12': 260,\n",
       " '2019-06-13': 259,\n",
       " '2019-06-14': 258,\n",
       " '2019-06-15': 257,\n",
       " '2019-06-16': 256,\n",
       " '2019-06-17': 255,\n",
       " '2019-06-18': 254,\n",
       " '2019-06-19': 253,\n",
       " '2019-06-20': 252,\n",
       " '2019-06-21': 251,\n",
       " '2019-06-22': 250,\n",
       " '2019-06-23': 249,\n",
       " '2019-06-24': 248,\n",
       " '2019-06-25': 247,\n",
       " '2019-06-26': 246,\n",
       " '2019-06-27': 245,\n",
       " '2019-06-28': 244,\n",
       " '2019-06-29': 243,\n",
       " '2019-06-30': 242,\n",
       " '2019-07-01': 241,\n",
       " '2019-07-02': 240,\n",
       " '2019-07-03': 239,\n",
       " '2019-07-04': 238,\n",
       " '2019-07-05': 237,\n",
       " '2019-07-06': 236,\n",
       " '2019-07-07': 235,\n",
       " '2019-07-08': 234,\n",
       " '2019-07-09': 233,\n",
       " '2019-07-10': 232,\n",
       " '2019-07-11': 231,\n",
       " '2019-07-12': 230,\n",
       " '2019-07-13': 229,\n",
       " '2019-07-14': 228,\n",
       " '2019-07-15': 227,\n",
       " '2019-07-16': 226,\n",
       " '2019-07-17': 225,\n",
       " '2019-07-18': 224,\n",
       " '2019-07-19': 223,\n",
       " '2019-07-20': 222,\n",
       " '2019-07-21': 221,\n",
       " '2019-07-22': 220,\n",
       " '2019-07-23': 219,\n",
       " '2019-07-24': 218,\n",
       " '2019-07-25': 217,\n",
       " '2019-07-26': 216,\n",
       " '2019-07-27': 215,\n",
       " '2019-07-28': 214,\n",
       " '2019-07-29': 213,\n",
       " '2019-07-30': 212,\n",
       " '2019-07-31': 211,\n",
       " '2019-08-01': 210,\n",
       " '2019-08-02': 209,\n",
       " '2019-08-03': 208,\n",
       " '2019-08-04': 207,\n",
       " '2019-08-05': 206,\n",
       " '2019-08-06': 205,\n",
       " '2019-08-07': 204,\n",
       " '2019-08-08': 203,\n",
       " '2019-08-09': 202,\n",
       " '2019-08-10': 201,\n",
       " '2019-08-11': 200,\n",
       " '2019-08-12': 199,\n",
       " '2019-08-13': 198,\n",
       " '2019-08-14': 197,\n",
       " '2019-08-15': 196,\n",
       " '2019-08-16': 195,\n",
       " '2019-08-17': 194,\n",
       " '2019-08-18': 193,\n",
       " '2019-08-19': 192,\n",
       " '2019-08-20': 191,\n",
       " '2019-08-21': 190,\n",
       " '2019-08-22': 189,\n",
       " '2019-08-23': 188,\n",
       " '2019-08-24': 187,\n",
       " '2019-08-25': 186,\n",
       " '2019-08-26': 185,\n",
       " '2019-08-27': 184,\n",
       " '2019-08-28': 183,\n",
       " '2019-08-29': 182,\n",
       " '2019-08-30': 181,\n",
       " '2019-08-31': 180,\n",
       " '2019-09-01': 179,\n",
       " '2019-09-02': 178,\n",
       " '2019-09-03': 177,\n",
       " '2019-09-04': 176,\n",
       " '2019-09-05': 175,\n",
       " '2019-09-06': 174,\n",
       " '2019-09-07': 173,\n",
       " '2019-09-08': 172,\n",
       " '2019-09-09': 171,\n",
       " '2019-09-10': 170,\n",
       " '2019-09-11': 169,\n",
       " '2019-09-12': 168,\n",
       " '2019-09-13': 167,\n",
       " '2019-09-14': 166,\n",
       " '2019-09-15': 165,\n",
       " '2019-09-16': 164,\n",
       " '2019-09-17': 163,\n",
       " '2019-09-18': 162,\n",
       " '2019-09-19': 161,\n",
       " '2019-09-20': 160,\n",
       " '2019-09-21': 159,\n",
       " '2019-09-22': 158,\n",
       " '2019-09-23': 157,\n",
       " '2019-09-24': 156,\n",
       " '2019-09-25': 155,\n",
       " '2019-09-26': 154,\n",
       " '2019-09-27': 153,\n",
       " '2019-09-28': 152,\n",
       " '2019-09-29': 151,\n",
       " '2019-09-30': 150,\n",
       " '2019-10-01': 149,\n",
       " '2019-10-02': 148,\n",
       " '2019-10-03': 147,\n",
       " '2019-10-04': 146,\n",
       " '2019-10-05': 145,\n",
       " '2019-10-06': 144,\n",
       " '2019-10-07': 143,\n",
       " '2019-10-08': 142,\n",
       " '2019-10-09': 141,\n",
       " '2019-10-10': 140,\n",
       " '2019-10-11': 139,\n",
       " '2019-10-12': 138,\n",
       " '2019-10-13': 137,\n",
       " '2019-10-14': 136,\n",
       " '2019-10-15': 135,\n",
       " '2019-10-16': 134,\n",
       " '2019-10-17': 133,\n",
       " '2019-10-18': 132,\n",
       " '2019-10-19': 131,\n",
       " '2019-10-20': 130,\n",
       " '2019-10-21': 129,\n",
       " '2019-10-22': 128,\n",
       " '2019-10-23': 127,\n",
       " '2019-10-24': 126,\n",
       " '2019-10-25': 125,\n",
       " '2019-10-26': 124,\n",
       " '2019-10-27': 123,\n",
       " '2019-10-28': 122,\n",
       " '2019-10-29': 121,\n",
       " '2019-10-30': 120,\n",
       " '2019-10-31': 119,\n",
       " '2019-11-01': 118,\n",
       " '2019-11-02': 117,\n",
       " '2019-11-03': 116,\n",
       " '2019-11-04': 115,\n",
       " '2019-11-05': 114,\n",
       " '2019-11-06': 113,\n",
       " '2019-11-07': 112,\n",
       " '2019-11-08': 111,\n",
       " '2019-11-09': 110,\n",
       " '2019-11-10': 109,\n",
       " '2019-11-11': 108,\n",
       " '2019-11-12': 107,\n",
       " '2019-11-13': 106,\n",
       " '2019-11-14': 105,\n",
       " '2019-11-15': 104,\n",
       " '2019-11-16': 103,\n",
       " '2019-11-17': 102,\n",
       " '2019-11-18': 101,\n",
       " '2019-11-19': 100,\n",
       " '2019-11-20': 99,\n",
       " '2019-11-21': 98,\n",
       " '2019-11-22': 97,\n",
       " '2019-11-23': 96,\n",
       " '2019-11-24': 95,\n",
       " '2019-11-25': 94,\n",
       " '2019-11-26': 93,\n",
       " '2019-11-27': 92,\n",
       " '2019-11-28': 91,\n",
       " '2019-11-29': 90,\n",
       " '2019-11-30': 89,\n",
       " '2019-12-01': 88,\n",
       " '2019-12-02': 87,\n",
       " '2019-12-03': 86,\n",
       " '2019-12-04': 85,\n",
       " '2019-12-05': 84,\n",
       " '2019-12-06': 83,\n",
       " '2019-12-07': 82,\n",
       " '2019-12-08': 81,\n",
       " '2019-12-09': 80,\n",
       " '2019-12-10': 79,\n",
       " '2019-12-11': 78,\n",
       " '2019-12-12': 77,\n",
       " '2019-12-13': 76,\n",
       " '2019-12-14': 75,\n",
       " '2019-12-15': 74,\n",
       " '2019-12-16': 73,\n",
       " '2019-12-17': 72,\n",
       " '2019-12-18': 71,\n",
       " '2019-12-19': 70,\n",
       " '2019-12-20': 69,\n",
       " '2019-12-21': 68,\n",
       " '2019-12-22': 67,\n",
       " '2019-12-23': 66,\n",
       " '2019-12-24': 65,\n",
       " '2019-12-25': 64,\n",
       " '2019-12-26': 63,\n",
       " '2019-12-27': 62,\n",
       " '2019-12-28': 61,\n",
       " '2019-12-29': 60,\n",
       " '2019-12-30': 59,\n",
       " '2019-12-31': 58,\n",
       " '2020-01-01': 57,\n",
       " '2020-01-02': 56,\n",
       " '2020-01-03': 55,\n",
       " '2020-01-04': 54,\n",
       " '2020-01-05': 53,\n",
       " '2020-01-06': 52,\n",
       " '2020-01-07': 51,\n",
       " '2020-01-08': 50,\n",
       " '2020-01-09': 49,\n",
       " '2020-01-10': 48,\n",
       " '2020-01-11': 47,\n",
       " '2020-01-12': 46,\n",
       " '2020-01-13': 45,\n",
       " '2020-01-14': 44,\n",
       " '2020-01-15': 43,\n",
       " '2020-01-16': 42,\n",
       " '2020-01-17': 41,\n",
       " '2020-01-18': 40,\n",
       " '2020-01-19': 39,\n",
       " '2020-01-20': 38,\n",
       " '2020-01-21': 37,\n",
       " '2020-01-22': 36,\n",
       " '2020-01-23': 35,\n",
       " '2020-01-24': 34,\n",
       " '2020-01-25': 33,\n",
       " '2020-01-26': 32,\n",
       " '2020-01-27': 31,\n",
       " '2020-01-28': 30,\n",
       " '2020-01-29': 29,\n",
       " '2020-01-30': 28,\n",
       " '2020-01-31': 27,\n",
       " '2020-02-01': 26,\n",
       " '2020-02-02': 25,\n",
       " '2020-02-03': 24,\n",
       " '2020-02-04': 23,\n",
       " '2020-02-05': 22,\n",
       " '2020-02-06': 21,\n",
       " '2020-02-07': 20,\n",
       " '2020-02-08': 19,\n",
       " '2020-02-09': 18,\n",
       " '2020-02-10': 17,\n",
       " '2020-02-11': 16,\n",
       " '2020-02-12': 15,\n",
       " '2020-02-13': 14,\n",
       " '2020-02-14': 13,\n",
       " '2020-02-15': 12,\n",
       " '2020-02-16': 11,\n",
       " '2020-02-17': 10,\n",
       " '2020-02-18': 9,\n",
       " '2020-02-19': 8,\n",
       " '2020-02-20': 7,\n",
       " '2020-02-21': 6,\n",
       " '2020-02-22': 5,\n",
       " '2020-02-23': 4,\n",
       " '2020-02-24': 3,\n",
       " '2020-02-25': 2,\n",
       " '2020-02-26': 1}"
      ]
     },
     "execution_count": 442,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dates =pd.date_range(start=pub_freq['publication_date'].min(), end=pub_freq['publication_date'].max())\n",
    "dates.shape[0]\n",
    "\n",
    "dictdate = {\"20\"+str(dates[x].strftime('%y-%m-%d')): dates.shape[0]-x for x in range(dates.shape[0]) }\n",
    "dictdate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 443,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>publication_date</th>\n",
       "      <th>counts</th>\n",
       "      <th>nr_day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2019-01-16</td>\n",
       "      <td>1</td>\n",
       "      <td>407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2019-02-01</td>\n",
       "      <td>1</td>\n",
       "      <td>391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2019-02-18</td>\n",
       "      <td>1</td>\n",
       "      <td>374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2019-02-26</td>\n",
       "      <td>1</td>\n",
       "      <td>366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2019-03-01</td>\n",
       "      <td>2</td>\n",
       "      <td>363</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  publication_date  counts  nr_day\n",
       "0       2019-01-16       1     407\n",
       "1       2019-02-01       1     391\n",
       "2       2019-02-18       1     374\n",
       "3       2019-02-26       1     366\n",
       "4       2019-03-01       2     363"
      ]
     },
     "execution_count": 443,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pub_freq['nr_day'] = pub_freq['publication_date'].map(dictdate)\n",
    "pub_freq['nr_day']\n",
    "pub_freq.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### b) calculate mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 444,
   "metadata": {},
   "outputs": [],
   "source": [
    "pub_freq['weighted_counts'] =pub_freq['nr_day']*pub_freq['counts']\n",
    "mean_cal = pub_freq['weighted_counts'].sum()/pub_freq['counts'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 445,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "39.483134405812145"
      ]
     },
     "execution_count": 445,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_cal"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### d) exponential function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 446,
   "metadata": {},
   "outputs": [],
   "source": [
    "p = 1/mean_cal\n",
    "mean, var, skew, kurt = geom.stats(p, moments='mvsk')\n",
    "mean\n",
    "\n",
    "geom.pmf(4, p)\n",
    "func=geom(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 447,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "fig = plt.figure(figsize=(12,8))\n",
    "ax = fig.add_subplot(111)\n",
    "ax.set_facecolor((0.933+0.04,0.8745+0.04,0.89+0.04)) ## white background\n",
    "\n",
    "ax.tick_params(axis='both', labelsize=14)\n",
    "x = np.arange(1,pub_freq['nr_day'].max())\n",
    "plt.plot(geom.pmf(x,p),'bo', ms=2, label='geom pmf',color='red')\n",
    "plt.plot(pub_freq['nr_day'],pub_freq['counts']/pub_freq['counts'].sum(),'bo', ms=3, label='real_dots', color=(0.502, 0.266,0.341))\n",
    "\n",
    "plt.hlines(y=(0,0.01, 0.02,0.03,0.04,0.05,), xmin=-0.5, xmax=5.5, color=[(0.85,0.85,0.85)], zorder=1) ## grey horizontal lines\n",
    "plt.xlabel('nr. of days announcedon on plattform\"', fontsize ='16', fontweight='bold', fontname=\"Arial\", labelpad=20)  \n",
    "plt.ylabel('% still announced on plattform', fontsize ='16', fontweight='bold', fontname=\"Arial\", labelpad = 20)\n",
    "plt.legend(['exponential distribution', 'sample'],fontsize ='14',frameon= True, facecolor='white')\n",
    "plt.savefig('fig1.png', bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### e) check goodness of fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 448,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Power_divergenceResult(statistic=2.8914873092385345, pvalue=1.0)"
      ]
     },
     "execution_count": 448,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.stats import chisquare\n",
    "chisquare(pub_freq['counts']/pub_freq['counts'].sum(), f_exp=geom.pmf(pub_freq['nr_day'],p))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 449,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KstestResult(statistic=1.0, pvalue=0.0)"
      ]
     },
     "execution_count": 449,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.stats import kstest\n",
    "kstest(pub_freq['counts']/pub_freq['counts'].sum(), func.cdf)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <font color='red'>TODO</font> \n",
    "check statistics what is wrong??"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4. Price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 450,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### correlation matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 451,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "price               1.000000\n",
       "price_wo_extras     0.997475\n",
       "extras              0.692814\n",
       "size                0.774922\n",
       "rooms               0.617574\n",
       "floor               0.109647\n",
       "public_transport   -0.049212\n",
       "shopping           -0.002304\n",
       "rating             -0.246659\n",
       "age                 0.022925\n",
       "KG                 -0.061835\n",
       "PS                 -0.025195\n",
       "SS                 -0.073029\n",
       "highway             0.039282\n",
       "Name: price, dtype: float64"
      ]
     },
     "execution_count": 451,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds.corr()['price'].dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 452,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1674"
      ]
     },
     "execution_count": 452,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds_corr=ds[(ds['price'].isna()==False) & (ds['size'].isna()==False) & (ds['price']<= 10000)& (ds['size']<= 200)]\n",
    "ds_corr.shape[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.1 Linear regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4.1.1 on size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 453,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "22.94\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 453,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = ds_corr['size']\n",
    "Y = ds_corr['price']\n",
    "\n",
    "slope, intercept, r_value, p_value, std_err = stats.linregress(X, Y)\n",
    "\n",
    "Y_pred = intercept + slope * ds_corr['size']\n",
    "print(round(slope,2))\n",
    "round(p_value*100,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 454,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "fig = plt.figure(figsize=(12,8))\n",
    "ax = fig.add_subplot(111)\n",
    "ax.set_facecolor((0.933+0.04,0.8745+0.04,0.89+0.04)) ## white background\n",
    "\n",
    "ax.tick_params(axis='both', labelsize=14)\n",
    "\n",
    "plt.scatter(X, Y, s=5, color=(0.502, 0.266,0.341))\n",
    "plt.plot(X, Y_pred, color='red')\n",
    "\n",
    "\n",
    "plt.xlabel('size in m2', fontsize ='16', fontweight='bold', fontname=\"Arial\", labelpad=20)  \n",
    "plt.ylabel('price in CHF', fontsize ='16', fontweight='bold', fontname=\"Arial\", labelpad = 20)\n",
    "plt.legend(['regression line', 'sample'],fontsize ='14',frameon= True, facecolor='white')\n",
    "plt.savefig('fig2_price_size.png', bbox_inches='tight')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4.1.2 on room numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 455,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "519.69\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 455,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = ds_corr['rooms']\n",
    "Y = ds_corr['price']\n",
    "\n",
    "slope, intercept, r_value, p_value, std_err = stats.linregress(X, Y)\n",
    "\n",
    "Y_pred = intercept + slope * ds_corr['rooms']\n",
    "print(round(slope,2))\n",
    "round(p_value*100,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 456,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "519.69\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 456,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = ds_corr['rooms']\n",
    "Y = ds_corr['price']\n",
    "\n",
    "slope, intercept, r_value, p_value, std_err = stats.linregress(X, Y)\n",
    "\n",
    "Y_pred = intercept + slope * ds_corr['rooms']\n",
    "print(round(slope,2))\n",
    "round(p_value*100,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 457,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(12,8))\n",
    "ax = fig.add_subplot(111)\n",
    "ax.set_facecolor((0.933+0.04,0.8745+0.04,0.89+0.04)) ## white background\n",
    "\n",
    "ax.tick_params(axis='both', labelsize=14)\n",
    "\n",
    "plt.scatter(X, Y, s=5, color=(0.502, 0.266,0.341))\n",
    "plt.plot(X, Y_pred, color='red')\n",
    "\n",
    "\n",
    "plt.xlabel('nr of rooms', fontsize ='16', fontweight='bold', fontname=\"Arial\", labelpad=20)  \n",
    "plt.ylabel('price in CHF', fontsize ='16', fontweight='bold', fontname=\"Arial\", labelpad = 20)\n",
    "plt.legend(['regression line', 'sample'],fontsize ='14',frameon= True, facecolor='white')\n",
    "plt.savefig('fig3_price_room.png', bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4.1.3 on floor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 458,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1740"
      ]
     },
     "execution_count": 458,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds_corr=ds[(ds['price'].isna()==False) & (ds['floor'].isna()==False) & (ds['price']<= 10000)& (ds['floor']<= 10)]\n",
    "ds_corr.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 459,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "51.05\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.02"
      ]
     },
     "execution_count": 459,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = ds_corr['floor']\n",
    "Y = ds_corr['price']\n",
    "\n",
    "slope, intercept, r_value, p_value, std_err = stats.linregress(X, Y)\n",
    "\n",
    "Y_pred = intercept + slope * ds_corr['floor']\n",
    "print(round(slope,2))\n",
    "round(p_value*100,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 460,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(12,8))\n",
    "ax = fig.add_subplot(111)\n",
    "ax.set_facecolor((0.933+0.04,0.8745+0.04,0.89+0.04)) ## white background\n",
    "\n",
    "ax.tick_params(axis='both', labelsize=14)\n",
    "\n",
    "plt.scatter(X, Y, s=5, color=(0.502, 0.266,0.341))\n",
    "plt.plot(X, Y_pred, color='red')\n",
    "\n",
    "\n",
    "plt.xlabel('nth floor', fontsize ='16', fontweight='bold', fontname=\"Arial\", labelpad=20)  \n",
    "plt.ylabel('price in CHF', fontsize ='16', fontweight='bold', fontname=\"Arial\", labelpad = 20)\n",
    "plt.legend(['regression line', 'sample'],fontsize ='14',frameon= True, facecolor='white')\n",
    "plt.savefig('fig3_price_floor.png', bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.2 Multivariate Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 461,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 462,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1446"
      ]
     },
     "execution_count": 462,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds_corr=ds[(ds['price'].isna()==False) & (ds['size'].isna()==False)& (ds['rooms'].isna()==False)& (ds['floor'].isna()==False) & (ds['price']<= 10000)& (ds['floor']<= 10)]\n",
    "ds_corr.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 463,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept:  359.5001431615524\n",
      "Coef:  [22.73056022  5.7523902  19.56878744]\n"
     ]
    }
   ],
   "source": [
    "Y = ds_corr['price']\n",
    "X = ds_corr[['size', 'rooms','floor']]\n",
    "lm = LinearRegression()\n",
    "model = lm.fit(X,Y)\n",
    "\n",
    "print(\"Intercept: \", lm.intercept_)\n",
    "print(\"Coef: \", lm.coef_)\n",
    "\n",
    "predictions  = lm.predict(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.extra"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 471,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['object_type', 'price', 'price_wo_extras', 'extras', 'size', 'rooms',\n",
       "       'floor', 'moovIn', 'balcony', 'lift', 'public_transport', 'shopping',\n",
       "       'rating', 'adress', 'publication_date', 'city', 'DateofScrapping',\n",
       "       'age', 'parking_out', 'pets_allowed', 'tv', 'kids_ok', 'KG', 'PS', 'SS',\n",
       "       'highway', 'parking_in'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 471,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 477,
   "metadata": {},
   "outputs": [],
   "source": [
    "counts=ds[['balcony', 'lift', 'public_transport', 'shopping', 'parking_out', 'pets_allowed', 'tv', 'kids_ok', 'KG', 'PS', 'SS','highway', 'parking_in']].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 479,
   "metadata": {},
   "outputs": [],
   "source": [
    "ds.to_csv('./Data/counts.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
